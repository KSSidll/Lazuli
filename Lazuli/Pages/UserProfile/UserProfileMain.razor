@page "/user/{userId}"

@inject IUserEndpoint userEndpoint
@inject IPostEndpoint postEndpoint
@inject ICommentEndpoint commentEndpoint

<UserProfileComponent UserModel="UserModel" />

<div class="row mt-3">

	<div class="col d-flex form-check form-check-inline justify-content-center">
		<input class="btn-check" type="radio" checked="@(_displaying == DisplayType.Posts)"
			   name="Displaying" @onchange="@(() => _displaying = DisplayType.Posts)"
			   id="displaying-posts"/>
		<label class="w-100 p-3 text-white btn btn-outline-secondary" for="displaying-posts">Posts</label>
	</div>
	
	<div class="col d-flex form-check form-check-inline justify-content-center">
		<input class="btn-check" type="radio" checked="@(_displaying == DisplayType.Comments)"
			   name="Displaying" @onchange="@(() => _displaying = DisplayType.Comments)"
			   id="displaying-comments"/>
		<label class="w-100 p-3 text-white btn btn-outline-secondary" for="displaying-comments">Comments</label>
	</div>
	
	<div class="col d-flex form-check form-check-inline justify-content-center">
		<input class="btn-check" type="radio" checked="@(_displaying == DisplayType.Pictures)"
			   name="Displaying" @onchange="@(() => _displaying = DisplayType.Pictures)"
			   id="displaying-pictures"/>
		<label class="w-100 p-3 text-white btn btn-outline-secondary" for="displaying-pictures">Pictures</label>
	</div>
	
</div>

	
@if (_loadingData)
{
	<div class="d-flex align-items-center">
		<strong>Loading...</strong>
		<div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
	</div>
}
else switch (_displaying)
{
	case DisplayType.Posts:
		if (Posts is not null)
		{
			foreach (var post in Posts)
			{
				<div class="border rounded rounded-3 p-2 m-2 bg-light text-dark">
					<PostComponent Post="post" />
				</div>
			}
		}
	
		break;
	
	case DisplayType.Comments:
		// TODO display comments

		break;
		
	case DisplayType.Pictures:
		// TODO display pictures

		break;
		
	default:
		break; 
}

@code {
	[Parameter]
	public string? UserId { get; set; }

	private UserModel? UserModel { get; set; }
	private enum DisplayType { Posts, Comments, Pictures }

	private DisplayType _displaying = DisplayType.Posts;
	
	private bool _loadingData = false;

	public List<PostViewModel>? Posts { get; set; }

	protected override async Task OnInitializedAsync()
	{
		_loadingData = true;

		UserModel = await userEndpoint.GetByUserId(int.Parse(UserId!));
		var posts = await postEndpoint.GetByUserId(UserModel!.Id);

		Posts = new List<PostViewModel>();
		foreach (var post in posts)
		{
			var postView = new PostViewModel
			{
				Id = post.Id,
				Title = post.Title,
				Body = post.Body,
				UserId = post.UserId
			};

			postView.Username = (await userEndpoint.GetByUserId(postView.UserId))?.Username;
			var comments = await commentEndpoint.GetByPostId(postView.Id);
			postView.Comments = new(comments.Select(x => new CommentViewModel() 
			{
				Email = x.Email,
				Id = x.Id,
				Body = x.Body
			}));

			Posts.Add(postView);
		}

		_loadingData = false;
	}

}
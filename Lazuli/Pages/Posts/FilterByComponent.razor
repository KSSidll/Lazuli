<div>
	<div class="btn-toolbar justify-content-between mt-2">
		<button class="btn btn-outline-light col-3" type="button" @onclick="Collapse">
			@if (_collapse)
			{
				<span>Filter options <span class="oi oi-caret-bottom ms-1"></span></span>
			}
			else
			{
				<span>Filter options <span class="oi oi-caret-top ms-1"></span></span>
			}
		</button>
	</div>


	@if (_collapse == false)
	{
		<EditForm Model="_filterModel" OnValidSubmit="HandleOnFilterEvent">
			<div class="m-3 bg-light rounded bg-opacity-75 p-sm-2">
				<div class="mb-3 input-group">
					<label for="phraseInput"><span class="input-group-text">Phrase in post</span></label>
					<InputText class="form-control ms-2" id="phraseInput" @bind-Value="_filterModel.Phrase" />
				</div>
				<div class="input-group">
					<label for="characterCountInput"><span class="input-group-text">Character Count</span></label>
					<label for="characterCountInput"><span class="input-group-text">from</span></label>
					<InputNumber class="form-control mx-2" id="characterCountInput" @bind-Value="_filterModel.MinCharCount"/>
					<label for="characterUpperLimit"><span class="input-group-text">to</span></label>
					<InputNumber class="form-control ms-2" id="characterUpperLimit" @bind-Value="_filterModel.MaxCharCount"/>
				</div>
				<div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
					@if (_canClear)
					{
						<button type="button" class="btn btn-danger" @onclick="HandleOnClearResults">Clear Results</button>
					}
					<button type="submit" class="btn btn-primary">Filter</button>
				</div>
			</div>
		</EditForm>
	}

</div>

@code {
	private bool _collapse = true;
	private bool _canClear = false;
	private PostFilterModel _filterModel = new PostFilterModel();

	[Parameter]
	public EventCallback<PostFilterModel> OnFilterEvent { get; set; }

	[Parameter]
	public EventCallback OnClearResults { get; set; }

	private void Collapse()
	{
		_collapse ^= true;
	}

	private async Task HandleOnClearResults()
	{
		await OnClearResults.InvokeAsync();
		_canClear = false;
	}

	private async Task HandleOnFilterEvent()
	{
		await OnFilterEvent.InvokeAsync(_filterModel);
		_canClear = true;
	}
}

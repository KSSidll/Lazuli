@inject NavigationManager NavigationManager
@inject IUserAuthenticationStateProvider UserAuthenticator
@inject ICommentEndpoint CommentEndpoint
@inject IPostEndpoint PostEndpoint

@if (Post is not null)
{
	<div class="post">
		<div class="d-grid gap-2">
			<div class="row">
				<div class="col-6 d-flex justify-content-start">
					<a href="" @onclick="NavToProfile" @onclick:preventDefault>
						<label class="fw-bold">@@@Post.Username</label>
					</a>
				</div>
				@if (_userId == Post.UserId)
				{
					<div class="col-6 d-flex justify-content-end">
						<button class="btn btn-outline-warning btn-sm me-1" type="button" @onclick="ToggleEditPost">
							<span class="oi oi-pencil"></span>
						</button>
						<button class="btn btn-danger btn-sm" type="button" @onclick="HandlePostDelete">
							<span class="oi oi-x"></span>
						</button>
					</div>
				}
			</div>
			<div class="fs-5">
				<label class="fst-italic">@Post.Title</label>
			</div>
			<div class="p-sm-2 shadow-sm">
				@if (!_editPost)
				{
					<label>@Post.Body</label>
				}
				else
				{
					<textarea class="bg-black text-white w-100 border-dark p-2" rows="4" @bind="EditPostBody"></textarea>
				}
			</div>
			<div class="d-flex">
				@if (_showComments == false)
				{
					<div class="col">
						<button type="button" class="show-comments btn btn-dark" @onclick="ShowComments">
							<span class="oi oi-comment-square me-2"></span>
							<span class="bg-dark">
								@Post.Comments?.Count
							</span>
						</button>
					</div>
				}
				else
				{
					<div class="col">
						<button type="button" class="hide-comments btn btn-secondary ps-4 pe-4" @onclick="ShowComments">
							<span class="oi oi-x"></span>
						</button>
					</div>
				}
				@if (_editPost)
				{
					<div class="col text-end me-1">
						<button type="button" class="confirm-edit-post btn btn-secondary" @onclick="ResetEditPost">
							<span class="oi oi-reload oi-"></span>
						</button>
						<button type="button" class="confirm-edit-post btn btn-success" @onclick="ConfirmEditPost">
							<span class="oi oi-check"></span>
						</button>
					</div>
				}
			</div>
		</div>
		@if (_showComments && Post.Comments is not null)
		{
			<div class="col-8">
				@if (Post.Comments.Count > 0)
				{
					@foreach (CommentViewModel? comment in Post.Comments)
					{
						<PostCommentComponent Comment="comment" OnCommentDelete="DeleteComment" PostOwnerId="Post.UserId"/>
					}
				}
				else
				{
					<div>
						No Comments!
					</div>
				}
			</div>
		}
	</div>
}

@code {

	[Parameter]
	public PostViewModel? Post { get; set; }

	[Parameter]
	public EventCallback<int> OnPostDelete { get; set; }

	private int _userId;

	private bool _showComments = false;
	private bool _editPost = false;

	public string EditPostBody { get; set; } = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		EditPostBody = Post?.Body!;
		_userId = await UserAuthenticator.GetBoundToUserId();
	}


	public void NavToProfile()
	{
		NavigationManager.NavigateTo($"/user/{Post!.UserId}");
	}

	private void ShowComments()
	{
		_showComments ^= true;
	}

	private void ToggleEditPost()
	{
		_editPost ^= true;
	}

	private void ResetEditPost()
	{
		EditPostBody = Post?.Body!;
	}

	private async Task HandlePostDelete()
	{
		if (Post is not null)
		{
			await OnPostDelete.InvokeAsync(Post.Id);
		}
	}

	private async Task DeleteComment(int commentId)
	{
		await CommentEndpoint.DeleteByCommentId(commentId);

		try
		{
			Post?.Comments?.Remove(Post.Comments.First(x => x.Id == commentId));
		}
		catch (InvalidOperationException)
		{
		}
	}

	private async Task ConfirmEditPost()
	{
		if (Post?.Body == EditPostBody) return;

		var succedded = await PostEndpoint.PatchPostBodyByPostId(Post!.Id, EditPostBody);

		if (succedded) Post.Body = EditPostBody;
		_editPost = false;
	}

}
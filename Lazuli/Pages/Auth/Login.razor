@page "/auth/login"
@layout AuthLayout

@implements IDisposable

@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IDbContextFactory<UserContext> UserDbFactory

<PageTitle>Login</PageTitle>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="row text-center text-white mb-4">
            <h2>Log in</h2>
        </div>
        <div class="row justify-content-center m-3">
            <InputText class="p-3 text-white" id="login" @bind-Value="loginModel.Login" placeholder=" Login"/>
        </div>
        <div class="row justify-content-center m-3">
            <InputText class="p-3 text-white" type="password" id="password" @bind-Value="loginModel.Password" placeholder=" Password" />
        </div>
        <div class="row justify-content-center m-3 mt-5">
            <button class="p-2 submit" type="submit">Log in</button>
        </div>
        <div class="row text-white mt-5">
            <p>
                Don't have an account?
                <a class="nav-to-signup" href="" @onclick="NavigateToSignup" @onclick:preventDefault>Sign up</a>
            </p>
        </div>
    </div>

</EditForm>

@code {
    protected override void OnInitialized()
    {
        userContext = UserDbFactory.CreateDbContext();

        // TODO check if logged in
    }

    private LoginModel loginModel = new();
    private UserContext? userContext;

    private void HandleLogin()
    {
        Logger.LogInformation("HandleLogin called");

        Logger.LogInformation("HandleLogin Login: " + loginModel.Login);
        Logger.LogInformation("HandleLogin Password: " + loginModel.Password);

        // TODO abstract this as function that gets login and password, checks if they exist in database and if yes, return auth token
        Logger.LogInformation("HandleLogin, Logged in: " + userContext!.AttemptToLogin(loginModel.Login!, loginModel.Password!));
    }

    private void NavigateToSignup()
    {
        Logger.LogInformation("NavigateToSignup called in Login");
        NavigationManager.NavigateTo("/auth/signup");
    }

    public void Dispose()
    {
        userContext?.Dispose();
    }
}

@page "/auth/login"
@layout AuthLayout

@implements IDisposable

@inject NavigationManager NavigationManager
@inject IDbContextFactory<UserContext> UserDbFactory
@inject IUserAuthenticationStateProvider AuthStateProvider
@inject IUserEndpoint UserEndpoint

<PageTitle>Login</PageTitle>

<EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
	<DataAnnotationsValidator/>

	<div class="container">
		<div class="row text-center text-white mb-4">
			<h2>Log in</h2>
		</div>
		<div class="row justify-content-center m-3">
			<InputText class="p-3 text-white" id="login" @bind-Value="_loginModel.Login" placeholder=" Login"/>
		</div>
		<div class="row justify-content-center m-3">
			<InputText class="p-3 text-white" type="password" id="password" @bind-Value="_loginModel.Password" placeholder=" Password"/>
		</div>
		<div class="row justify-content-center m-3 mt-5">
			<button class="p-2 submit" type="submit">Log in</button>
		</div>
		<div class="row text-white mt-5">
			<p>
				Don't have an account?
				<a class="nav-to-signup" href="" @onclick="NavigateToSignup" @onclick:preventDefault>Sign up</a>
			</p>
		</div>
	</div>

</EditForm>

@code {

	protected override async Task OnInitializedAsync()
	{
		_userContext = await UserDbFactory.CreateDbContextAsync();

	// check if user is authenticated
		if (await AuthStateProvider.IsAuthenticated())
			NavigationManager.NavigateTo("/");
	}

	private readonly LoginModel _loginModel = new();
	private UserContext? _userContext;

	// TODO add animation for logging in
	public bool LoggingIn { get; set; }

	private async void HandleLogin()
	{
		if (_loginModel.Login is null || _loginModel.Password is null)
			throw new InvalidOperationException("HandleLogin was called without login form being filled, DataAnnotationsValidator failed");

		if (_userContext is null)
			throw new InvalidOperationException("userContext is null in HandleLogin method, which shouldn't be possible");

		User? user = _userContext.GetUser(_loginModel.Login, _loginModel.Password);

	// TODO add message when there is no user that matches provided credentials in the database
		if (user is null) return;

		LoggingIn = true;

		UserModel authUser = (await UserEndpoint.GetByUserId(user.BoundToUserId))!;

		AuthenticatedUserModel authUserModel = new()
		{
			BoundToUserId = authUser.Id.ToString(),
			Email = authUser.Email
		};


	// update authentication status and navigate to index/controller page
		await AuthStateProvider.Login(authUserModel);
		LoggingIn = false;

		NavigationManager.NavigateTo("/");
	}

	private void NavigateToSignup()
	{
		NavigationManager.NavigateTo("/auth/signup");
	}

	public void Dispose()
	{
		_userContext?.Dispose();
	}

}
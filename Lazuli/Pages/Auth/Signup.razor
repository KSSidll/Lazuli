@page "/auth/signup"
@layout AuthLayout

@implements IDisposable

@inject ILogger<Signup> Logger
@inject NavigationManager NavigationManager
@inject IUserEndpoint UserEndpoint
@inject IDbContextFactory<UserContext> UserDbFactory
@inject IUserAuthenticationStateProvider AuthStateProvider

<PageTitle>Signup</PageTitle>

<EditForm Model="@_signupModel" OnValidSubmit="@HandleSignup">
	<DataAnnotationsValidator/>

	<div class="container">
		<div class="row text-center text-white mb-4">
			<h2>Sign up</h2>
		</div>
		<div class="row justify-content-center m-3">
			<InputText class="p-3 text-white" id="login" @bind-Value="_signupModel.Login" placeholder=" Login"/>
		</div>
		<div class="row justify-content-center m-3">
			<InputText class="p-3 text-white" type="password" id="password" @bind-Value="_signupModel.Password" placeholder=" Password"/>
		</div>
		<div class="row justify-content-center m-3">
			<InputSelect class="p-3  text-white" @bind-Value="@_signupModel.BoundToUserId">
				@foreach (UserModel user in _users!)
				{
					<option value=@user.Id>@user.Name</option>
				}
			</InputSelect>
		</div>
		<div class="row justify-content-center m-3 mt-5">
			<button class="p-2 submit" type="submit">Sign up</button>
		</div>
		<div class="row text-white mt-5">
			<p>
				Have an account already?
				<a class="nav-to-login" href="" @onclick="NavigateToLogin" @onclick:preventDefault>Log in</a>
			</p>
		</div>
	</div>

</EditForm>

@code {

	protected override async Task OnInitializedAsync()
	{
		_userContext = await UserDbFactory.CreateDbContextAsync();

	// check if user is authenticated
		if (await AuthStateProvider.IsAuthenticated())
			NavigationManager.NavigateTo("/");

		_users = await UserEndpoint.GetAll();

	// don't know how to make placeholder look different from
	// selected value in InputSelect, so we assign first found user
	// as the selected one instead to not break color logic
		_signupModel.BoundToUserId = _users[0].Id;
	}

	private readonly SignupModel _signupModel = new();
	private List<UserModel>? _users = new();
	private UserContext? _userContext;

	// TODO add animation for signing up
	public bool SigningUp { get; set; }

	private async void HandleSignup()
	{
		if (_signupModel.Login is null || _signupModel.Password is null || _signupModel.BoundToUserId < 1)
			throw new InvalidOperationException("HandleSignup was called without signup form being filled, DataAnnotationsValidator failed");

		if (_userContext is null)
			throw new InvalidOperationException("userContext is null in HandleSignup method, which shouldn't be possible");

		SigningUp = true;

		_userContext.Add(new User(_signupModel.Login, _signupModel.Password, _signupModel.BoundToUserId));
		await _userContext.SaveChangesAsync();

		User? user = _userContext.GetUser(_signupModel.Login, _signupModel.Password);

		if (user is null) throw new DbUpdateException("User wasn't found in the database after add operation");

	// update authentication status and navigate to index/controller page

		UserModel authUser = _users!.Find(x => x.Id == user.BoundToUserId)!;

		AuthenticatedUserModel authUserModel = new()
		{
			BoundToUserId = authUser.Id.ToString(),
			Email = authUser.Email
		};

		await AuthStateProvider.Login(authUserModel);

		SigningUp = false;

		NavigationManager.NavigateTo("/");
	}

	private void NavigateToLogin()
	{
		Logger.LogInformation("NavigateToLogin called in Signup");
		NavigationManager.NavigateTo("/auth/login");
	}

	public void Dispose()
	{
		_userContext?.Dispose();
	}

}